GIT 版本控制的软件

Git 是一个用于帮助用户实现版本控制的软件。
在项目文件夹中打开git终端
1.执行git init 命令，创建一个.git文件
2.开始管理：命令 git status 查看目录下的文件状态，红色表示文件尚未开始管理
3.git add 文件名
此时这个文件变为绿色状态
 git add . 表示管理当前目录下面的所有文件

git config —global user.email ‘xxxx@…’.  —-配置提交版本的人的信息ß
git config —global user.name ‘xxxxx’
git commit -m ‘Version 1’ —-提交变更，添加变更信息，最好是添加详细的描述信息

当项目中的文件出现变更
git status 会看到红色标注的文件出现变更
如果修改人没变，直接git commint -m ‘Version2’

git log 可以查看相关的变更

3.回滚版本
git reset —hard 【log中的版本号】

4.撤销之前的回滚
git reflog 查看之前的回滚掉的版本
git reset —hard 【log中的版本号】

5.撤销当前的修改
git checkout templates 【文件名】 刷新文件后会发现撤销的修改文件

以上是对自己的项目进行本地管理

将版本发布到正式环境进行发布：
当新的项目开发到一半的时候，原发布的代码出现bug，需要先暂停手头的工作，然后先处理bug的功能

git stash              找到所有红色的被改动的文件，临时存在一个隐藏文件
当改完之前的bug，继续修改之前的stash 掉的文件

git stash pop        将stash掉的文件恢复回来，并自动将修改的之前的bug 合并为最新的文件，变成是bug修改之后的文件
当stash掉的文件将临时修改的文件暂存了，然后修改的项目中的代码没有涉及到stash掉的部分，则会合并。如果修改了这部分stash文件则会显示冲突，将冲突的代码全部显示出来需要user手动修改。
一旦出现冲突，只能手动删除
git stash list   查看某个暂存的所有记录
git stash apply 【标号】 恢复指定的标号的暂存
git stash clear 
git stash drop 【编号】

一分支的方式管理
在开发新项目的时候想恢复之前的下架的一个功能

git branch dev 创建了一个dev分支
git checkout dev进入新建的dev分支
在dev 中开发新功能
暂存新功能的代码，将代码commit 到dev中

想回到master中先恢复之前的功能。
先创建新分支，将功能添加到分支中，分钟commit，然后测试后发布到master中

注意合并顺序
回到master  git checkout matser
git merge 【要合并过来的分支名】
Git log就能看到 分支的修改合并到了master中
git branch -d 【无用的分支名】

如果跳出日志记录框，就插入自己的合并修改记录，:wq 退出
如果出现同一行代码出现多个分支修改，merge的时候会冲突，还是只能手动修改冲突的代码。

在异地办公的情况，多电脑协同开发：
github /bitbucket/码云 代码托管网站
创建自己的代码托管网站:gitlab
注册账号：在gitlab自己注册，在公司使用公司分配的账号密码😂

github 提交代码：
1.创建一个代码仓库
https 仓库地址
在git 中分支执行git remote add origin https://github.com/prowerInJava/git-.git
git push origin master 将代码推到master分支，会弹窗输入git的用户名密码
git push origin dev  将dev分支推上github
代码已经托管到github上后，在另外的电脑上新建文件右键git here ：执行
git clone https://github.com/prowerInJava/git-.git
项目下载到文件夹中
cd dbhot —进入项目
git status
git branch dev
git checkout dev
git pull origin dev 将代码pull到dev分支
新加功能后，提交开发一部分的代码
git add .
Git commit -m ‘……..’
Git push origin dev

在原电脑上的代码现在少于 之前的新电脑中的代码
git pull origin dev 将新提交的代码拉下来
git status
git add .
git commit -m ‘……’
git push origin dev

开发了新功能1.py 但是commit 1.py 之后没有push到github上。

在另一个地方创建新功能2.py commit 1.py之后需要gti push origin dev 

回到1.py的文件写新功能时，需要先git pull origin dev 将github的代码拉下来，写上合并的备注。

git pull origin dev 等价于下面两条命令
1. git fetch origin dev
2. git merge origin /dev  
git rebase 的作用：
保持提交记录的整洁。


